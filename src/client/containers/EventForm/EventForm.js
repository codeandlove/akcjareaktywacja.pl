import React, { Component } from "react";import PropTypes from "prop-types";import { EditorState, convertToRaw } from "draft-js";import { Editor } from "react-draft-wysiwyg";import draftToHtml from "draftjs-to-html";import "./EventForm.scss";import truncate from "truncate";import UrlSlug from "url-slug";import ReCAPTCHA from "react-google-recaptcha";import { connect } from "react-redux";import { compose } from "redux";import { firebaseConnect, isEmpty, isLoaded } from "react-redux-firebase";import moment from "moment";import "moment/locale/pl";import DatePicker from "react-datepicker";import "react-datepicker/dist/react-datepicker.css";import { Container, Segment, Header, Message, Button, Form, Input, Icon, Confirm } from "semantic-ui-react";import { StandaloneSearchBox } from "react-google-maps/lib/components/places/StandaloneSearchBox";import "./../../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css";const mapsApiKey = "AIzaSyCr9-6MJQJ6wnM46TyfMx2XkY8adleOhLg";const GOOGLE_API = "https://maps.google.com/maps/api/geocode/json";class EventForm extends Component {    constructor() {        super();        this.state = {            title: null,            editorState: null,            description: null,            short: null,            date: null,            owner: null,            contact: null,            coordinates: null,            openConfirm: false,            location: null,            discard: false,            messageType: null,            captcha: false        }    }    componentWillUnmount() {        const { discard } = this.state;        const draft = {            ...this.state,            date: this.state.date.valueOf()        };        if(discard) {            localStorage.removeItem("eventDraft");            return        }        localStorage.setItem("eventDraft", JSON.stringify(draft));    }    componentDidMount() {        const { coordinates, profile, params } = this.props;        let draft = JSON.parse(localStorage.getItem("eventDraft"));        this.setState({            editorState: EditorState.createEmpty()        });        if(!!coordinates) {            this.setState({                coordinates: coordinates            }, () => {                this.getLocation(coordinates);            });        }        if(!isEmpty(profile)) {            this.setState({                owner: profile.displayNick || ""            });        }        let date = moment();        this.setState({            date: date        });        if(!isEmpty(params)) {            date = moment(parseInt(params.eventDate, 10)).hour(20).minutes(0);            //Prevent to set past date            if(date.diff(moment(), "days") < 0) {                date = moment();            }            this.setState({                date: date,                coordinates: null,                location: null            });        }        if(!isEmpty(draft)) {            //read from local storage            let draftState = {                title: draft.title,                coordinates: draft.coordinates,                location: draft.location,                contact: draft.contact,                description: draft.description,                short: draft.short            };            if(!!this.state.owner) {                draftState = {                    ...draftState,                    owner: draft.owner                }            }            this.setState({                ...draftState,                messageType: "editor/draft-state"            });        }    }    componentWillReceiveProps(props) {        if(!!props.coordinates) {            this.setState({                coordinates: props.coordinates            }, () => {                this.getLocation(props.coordinates);            });        }        if(!isEmpty(props.profile)) {            this.setState({                owner: props.profile.displayNick || ""            });        }    }    initConfirm = () => {        this.setState({            openConfirm: true        });    };    confirmDenied = () => {        this.setState({            openConfirm: false        }, () => this.props.cancel());    };    confirmAccept = () => {        this.setState({            openConfirm: false        }, () => this.handleSave());    };    renderMessage = () => {        const { messageType } = this.state;        let result = null;        switch(messageType) {            case "nick/nick-exist":                result = (                    <Message                        error                        header="Błąd formularza"                        content="Użytkownik o takim nicku już istnieje. Jeśli to Ty, zaloguj się aby korzystać z Twojego podpisu."                    />                );                break;            case "editor/draft-state":                result = (                    <Message                        info                        header="Uwaga!"                        content="Wczytuje dane z pamięci. Sprawdź czy wszystko się zgadza."                    />                );                break;            default:                result = null;                break;        }        return (result) ? result : null;    };    validateValues = (values) => {        const result = values.filter(val => {            return this.state[val] === false || this.state[val] === null || !this.state[val];        });        return result.length !== 0;    };    handleChange = name => event => {        switch(name) {            case "date":                this.setState({                    date: event                });                break;            case "location":                this.setState({                    location: event.target.value                });                break;            default:                this.setState({                    [name]: event.target.value                });        }    };    getLocation = coordinates => {        const latLng = `${coordinates.lat},${coordinates.lng}`;        const url = `${GOOGLE_API}?latlng=${encodeURI(latLng)}&key=${mapsApiKey}`;        fetch(url).then(            response => {                return response.json();            }        ).then(jsonData => {            this.setState({                location: (jsonData.results[0]) ? jsonData.results[0].formatted_address : latLng            })        }).catch(error => {            console.log(error);        });    };    handleChangeLocation = () => {        const place = this.refs.location.getPlaces();        const location = place[0].geometry.location;        this.props.updateEvent({            coordinates: {                lat: location.lat(),                lng: location.lng()            }        });    };    onEditorStateChange = (editorState) => {        this.setState({            editorState,            description: draftToHtml(convertToRaw(editorState.getCurrentContent())),            short: truncate(editorState.getCurrentContent().getPlainText(), 100)        });    };    handleSave = () => {        const { title, description, short, date, owner, contact, coordinates, location } = this.state;        const { auth, firebase } = this.props;        const data = {            title: title,            description: description,            short: short,            owner: owner,            contact: contact,            coordinates: coordinates,            location: location,            date: date.valueOf(),            slug: UrlSlug(`${title} ${moment().format("L")}`)        };        if(this.validateValues(["title", "description", "date", "owner", "contact", "coordinates", "captcha"])) return;        if(isLoaded(auth) && isEmpty(auth)){            const usersRef = firebase.database().ref("/users");            //Check if nick is unique            usersRef.orderByChild("displayNick").equalTo(owner).once("value").then(snapshot => {                if(!snapshot.val()) {                    firebase.auth().signInAnonymously().then(res => {                        this.props.saveEvent({                            ...data,                            participants: [res.uid]                        });                        localStorage.removeItem("eventDraft");                    });                } else {                    this.setState({                        messageType: "nick/nick-exist"                    });                }            });        } else {            this.props.saveEvent({                ...data,                participants: [auth.uid]            });            localStorage.removeItem("eventDraft");        }    };    captchaVerifyHandler = () => {        this.setState({            captcha: true        })    };    cancelForm = () => {        this.setState({            discard: true        }, () => {            this.props.cancel();        })    };    previewDraft = () => {      const { router } = this.context;      router.history.push('/event/preview');    };    handleKeyPress = event => {        if(event.key === 'Enter') {            event.preventDefault();        }        //        // event.preventDefault();        // console.log(event);        //return false;    };    render() {        const { title, location, owner, date, editorState, openConfirm, messageType } = this.state;        const { profile } = this.props;        return (            <Container>                <Segment clearing basic>                    <Button basic onClick={() => this.props.cancel()} floated="right" icon="x" />                    <Button className="button-event-form-expand" basic onClick={this.props.toggleColExpand} floated="right" icon="expand" />                    <Header floated="left" size="large">                        Dodaj wydarzenie                    </Header>                </Segment>                <Segment clearing basic>                    <Form error={messageType !== null} onSubmit={this.initConfirm} onKeyPress={this.handleKeyPress}>                        {this.renderMessage()}                        <Form.Field>                            <label>Tytuł wydarzenia</label>                            <Input placeholder="Wpisz tytuł wydarzenia" type="text" id="title" name="title" value={title || ""} onChange={this.handleChange("title")} />                        </Form.Field>                        <Form.Field>                            <label>Lokacja</label>                            <StandaloneSearchBox ref="location" onPlacesChanged={this.handleChangeLocation}>                                <Input placeholder="Wybierz lokacje" type="text" id="location" name="location" value={location || ""} onChange={this.handleChange("location")} />                            </StandaloneSearchBox>                            <Confirm open={false} />                        </Form.Field>                        <Form.Field>                            <label>Data i czas</label>                            <DatePicker                                customInput={<DateInput />}                                selected={date}                                onChange={this.handleChange("date")}                                minDate={moment()}                                showTimeSelect                                timeFormat="HH:mm"                                timeIntervals={15}                                dateFormat="LLL"                                locale="pl"                                timeCaption="Godzina"                            />                        </Form.Field>                        <Form.Group widths="equal">                            {isEmpty(profile) ?                                (                                    <Form.Field>                                        <label>Organizator</label>                                        <input ref={el => this.nick = el} label="Organizator" id="owner" name="owner" placeholder="Wpis nazwę organizatora" onChange={this.handleChange("owner")} />                                    </Form.Field>                                )                                :                                (                                    <Form.Field>                                        <label>Organizator</label>                                        <input value={owner} name="owner" disabled onChange={() => null}/>                                    </Form.Field>                                )                            }                            <Form.Input fluid label="Kontakt" id="contact" name="contact" placeholder="Jak się z Tobą skontaktować?" onChange={this.handleChange("contact")} />                        </Form.Group>                        <Form.Field>                            <label>Opis</label>                            <Editor                                editorState={editorState}                                wrapperClassName="ar-editor-wrapper"                                editorClassName="ar-editor"                                onEditorStateChange={this.onEditorStateChange}                                localization={{                                    locale: "pl",                                }}                                toolbar={{                                    options: ["inline", "blockType", "fontSize", "list", "textAlign", "colorPicker", "link", "emoji", "image", "remove", "history"],                                    inline: {                                        options: ["bold", "italic", "underline"],                                    },                                }}                            />                        </Form.Field>                        <Form.Field>                            <ReCAPTCHA                                ref="recaptcha"                                sitekey="6LcFz04UAAAAAJDHq5dZd271YUufgAFjHh02dSOl"                                onChange={this.captchaVerifyHandler}                            />                        </Form.Field>                        <Form.Field >                            <Button onClick={this.cancelForm} floated="left">                                <Icon name="x" />                                Anuluj                            </Button>                            <Button onClick={this.previewDraft} floated="left" color="red" >                                <Icon name="eye" />                                Podgląd wydarzenia                            </Button>                            <Button type="submit" floated="right" color="olive" disabled={this.validateValues(["title", "description", "date", "owner", "contact", "coordinates", "captcha"])}>                                <Icon name="check" />                                Dodaj wydarzenie                            </Button>                        </Form.Field>                    </Form>                    <Confirm                        open={openConfirm}                        cancelButton="Nie"                        confirmButton="Tak"                        content="Czy chcesz dodać nowe wydarzenie w zaznaczonym miejscu?"                        onCancel={this.confirmDenied}                        onConfirm={this.confirmAccept}                    />                </Segment>            </Container>        )    }}class DateInput extends Component {    render () {        return (            <Input placeholder="Podaj datę i czas" type="text" id="date" name="date" value={this.props.value} onClick={this.props.onClick} onFocus={this.props.onClick} />        )    }}EventForm.contextTypes = {    router: PropTypes.object};export default compose(    firebaseConnect(),    connect(({ firebase: { auth, profile } }) => ({ auth, profile })))(EventForm);